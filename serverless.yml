org: aselkk
app: video-platform
service: video-platform
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  environment:
    user_pool_id: { Ref: UserPoolVP } 
    client_id: { Ref: UserPoolClientVP }
    table_name: { Ref: UsersTableVP }
    bucket_name: { Ref: S3BucketVP }
  apiGateway:
    binaryMediaTypes:
      - 'multipart/form-data'

  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
        - dynamodb:*
        - s3:*
      Resource: "*"

plugins:
    - serverless-s3-sync

custom:
    tableName: player-points
    bucketName: vp-s3-bucket-akk
    s3Sync:
        - bucketName: vp-s3-bucket
          localDir: uploadData

functions: 
  signUp: 
    handler: lambdas/user/signUp.handler
    events: 
      - http: 
          path: /user/signUp
          method: post
          cors: true
  verification: 
    handler: lambdas/user/verification.handler
    events: 
      - http: 
          path: /user/verification
          method: post
          cors: true
  signIn: 
    handler: lambdas/user/signIn.handler
    events: 
      - http: 
          path: /user/signIn
          method: post
          cors: true
  getUsers: 
    handler: lambdas/user/getUsers.handler
    events: 
      - http: 
          path: /user/getUsers
          method: get
          cors: true
  preSignUp: 
    handler: triggers/preSignUp.handler
    events:
      - cognitoUserPool:
          pool: vp-user-pool
          trigger: PreSignUp
          existing: true
          forceDeploy: true
  createFile:
    handler: lambdas/s3/createFile.handler
    events:
        - http:
              path: create-file/{fileName}
              method: POST
              cors: true
  getFile:
      handler: lambdas/s3/getFile.handler
      events:
          - http:
                path: get-file/{fileName}
                method: GET
                cors: true
  uploadFile:
    handler: lambdas/s3/uploadFile.handler
    events:
        - http:
              path: upload-file
              method: GET
              cors: true

resources:
  Resources:
    S3BucketVP:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: vp-s3-bucket
        CorsConfiguration:

    UserPoolVP:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: vp-user-pool

        UsernameAttributes:
          - "email"

        Schema:
          - AttributeDataType: String
            Name: first_name
            Required: false
            Mutable: true

          - AttributeDataType: String
            Name: last_name
            Required: false
            Mutable: true

        Policies:
          PasswordPolicy:
            MinimumLength: 6

        EmailVerificationMessage: Your verification code is {####}.
        EmailVerificationSubject: Your verification code

        AutoVerifiedAttributes: ["email"]

    UserPoolClientVP:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: vp-user-pool-client
        GenerateSecret: false
        UserPoolId: { Ref: UserPoolVP }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"

    UsersTableVP:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: vp-users-table
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S

        KeySchema:
          - AttributeName: email
            KeyType: HASH

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

  